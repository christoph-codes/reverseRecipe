# Types ===========
type User {
  id: String!
  first: String!
  last: String!
  email: String!
  created: String!
  updated: String!
}

type Ingredient {
  id: String!
  name: String!
  created: String!
  updated: String!
}

type Recipe {
  id: String!
  name: String!
  imgSrc: String
  cookTime: Int
  ingredients: [String]
  instructions: String
  measurements: [String]
  category: String
  created: String!
  updated: String!
}

# Input Type Objects ===========
input IUser {
  id: String
  first: String!
  last: String!
  email: String!
  # created is generated on add
  # updated is generated on add/update
}

input IIngredient {
  id: String
  name: String!
  # created is generated on add
  # updated is generated on add/update
}

input IRecipe {
  id: String
  name: String!
  imgSrc: String
  cookTime: Int
  ingredients: [String]
  instructions: String
  measurements: [String]
  category: String
  # created is generated on add
  # updated is generated on add/update
}

# Mutation Response Types ===========
type TId {
  id: String!
}
union UData = User | Ingredient | Recipe | TId

type ResponseObject {
  count: Int!
  data: [UData]!
  error: String
}

# Queries ===========
type Query {
  user(id: String!): User
  listUsers(ids: [String!]!): [User]!
  ingredient(id: String!): Ingredient
  listIngredients(ids: [String!]!): [Ingredient]!
  recipe(id: String!): Recipe
  listRecipes(ids: [String!]!): [Recipe]!
}

# Mutations ===========
type Mutation {
  addUser(data: IUser!): ResponseObject!
  deleteUser(id: String!): ResponseObject!
  addIngredient(data: IIngredient!): ResponseObject!
  deleteIngredient(id: String!): ResponseObject!
  addRecipe(data: IRecipe!): ResponseObject!
  deleteRecipe(id: String!): ResponseObject!
  # batch mutations
}