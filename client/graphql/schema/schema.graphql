type Query {
  ingredient(query: IngredientQueryInput): Ingredient
  ingredients(query: IngredientQueryInput, limit: Int = 100, sortBy: IngredientSortByInput): [Ingredient]!
  recipe(query: RecipeQueryInput): Recipe
  recipes(query: RecipeQueryInput, limit: Int = 100, sortBy: RecipeSortByInput): [Recipe]!
}

enum IngredientSortByInput {
  NAME_ASC
  NAME_DESC
  _ID_ASC
  _ID_DESC
  IMGSRC_ASC
  IMGSRC_DESC
}

type Ingredient {
  _id: ObjectId
  imgSrc: String
  name: String
}

input RecipeInsertInput {
  measurements: [String]
  name: String
  _id: ObjectId
  category: String
  cookTime: Int
  imgSrc: String
  ingredients: [String]
  instructions: String
}

type UpdateManyPayload {
  matchedCount: Int!
  modifiedCount: Int!
}

type Mutation {
  deleteManyIngredients(query: IngredientQueryInput): DeleteManyPayload
  deleteManyRecipes(query: RecipeQueryInput): DeleteManyPayload
  deleteOneIngredient(query: IngredientQueryInput!): Ingredient
  deleteOneRecipe(query: RecipeQueryInput!): Recipe
  insertManyIngredients(data: [IngredientInsertInput!]!): InsertManyPayload
  insertManyRecipes(data: [RecipeInsertInput!]!): InsertManyPayload
  insertOneIngredient(data: IngredientInsertInput!): Ingredient
  insertOneRecipe(data: RecipeInsertInput!): Recipe
  replaceOneIngredient(query: IngredientQueryInput, data: IngredientInsertInput!): Ingredient
  replaceOneRecipe(query: RecipeQueryInput, data: RecipeInsertInput!): Recipe
  updateManyIngredients(query: IngredientQueryInput, set: IngredientUpdateInput!): UpdateManyPayload
  updateManyRecipes(query: RecipeQueryInput, set: RecipeUpdateInput!): UpdateManyPayload
  updateOneIngredient(query: IngredientQueryInput, set: IngredientUpdateInput!): Ingredient
  updateOneRecipe(query: RecipeQueryInput, set: RecipeUpdateInput!): Recipe
  upsertOneIngredient(query: IngredientQueryInput, data: IngredientInsertInput!): Ingredient
  upsertOneRecipe(query: RecipeQueryInput, data: RecipeInsertInput!): Recipe
}

type Recipe {
  _id: ObjectId
  category: String
  cookTime: Int
  imgSrc: String
  ingredients: [String]
  instructions: String
  measurements: [String]
  name: String
}

scalar ObjectId

enum RecipeSortByInput {
  NAME_ASC
  NAME_DESC
  _ID_DESC
  CATEGORY_DESC
  COOKTIME_ASC
  COOKTIME_DESC
  INSTRUCTIONS_DESC
  _ID_ASC
  CATEGORY_ASC
  IMGSRC_ASC
  IMGSRC_DESC
  INSTRUCTIONS_ASC
}

input RecipeUpdateInput {
  cookTime_inc: Int
  name_unset: Boolean
  category_unset: Boolean
  imgSrc_unset: Boolean
  ingredients_unset: Boolean
  name: String
  imgSrc: String
  ingredients: [String]
  _id_unset: Boolean
  instructions_unset: Boolean
  measurements_unset: Boolean
  cookTime_unset: Boolean
  measurements: [String]
  cookTime: Int
  _id: ObjectId
  category: String
  instructions: String
}

type DeleteManyPayload {
  deletedCount: Int!
}

input RecipeQueryInput {
  AND: [RecipeQueryInput!]
  _id_exists: Boolean
  instructions_nin: [String]
  name_ne: String
  _id_in: [ObjectId]
  category_in: [String]
  category_exists: Boolean
  cookTime_gte: Int
  _id_lte: ObjectId
  cookTime_gt: Int
  instructions: String
  cookTime_lte: Int
  _id_gte: ObjectId
  imgSrc: String
  OR: [RecipeQueryInput!]
  name_in: [String]
  ingredients_in: [String]
  name_gt: String
  measurements_exists: Boolean
  _id_gt: ObjectId
  cookTime_nin: [Int]
  measurements_nin: [String]
  imgSrc_exists: Boolean
  cookTime_lt: Int
  category_lte: String
  ingredients: [String]
  name_gte: String
  name_exists: Boolean
  name_lte: String
  category_gt: String
  instructions_lte: String
  ingredients_exists: Boolean
  name_lt: String
  category: String
  _id_ne: ObjectId
  name_nin: [String]
  instructions_lt: String
  category_lt: String
  _id: ObjectId
  imgSrc_gt: String
  cookTime: Int
  imgSrc_lt: String
  cookTime_ne: Int
  imgSrc_nin: [String]
  imgSrc_ne: String
  instructions_gte: String
  _id_lt: ObjectId
  instructions_exists: Boolean
  name: String
  imgSrc_gte: String
  ingredients_nin: [String]
  instructions_in: [String]
  instructions_gt: String
  instructions_ne: String
  cookTime_in: [Int]
  category_nin: [String]
  measurements: [String]
  imgSrc_in: [String]
  imgSrc_lte: String
  cookTime_exists: Boolean
  measurements_in: [String]
  category_ne: String
  _id_nin: [ObjectId]
  category_gte: String
}

input IngredientQueryInput {
  name: String
  imgSrc_gte: String
  _id_gte: ObjectId
  name_nin: [String]
  imgSrc_lte: String
  name_gte: String
  imgSrc: String
  name_in: [String]
  imgSrc_nin: [String]
  _id_ne: ObjectId
  imgSrc_gt: String
  imgSrc_ne: String
  imgSrc_lt: String
  _id_nin: [ObjectId]
  OR: [IngredientQueryInput!]
  _id_lt: ObjectId
  _id_in: [ObjectId]
  _id_exists: Boolean
  name_lt: String
  _id_lte: ObjectId
  _id: ObjectId
  imgSrc_in: [String]
  name_exists: Boolean
  imgSrc_exists: Boolean
  name_lte: String
  _id_gt: ObjectId
  name_gt: String
  AND: [IngredientQueryInput!]
  name_ne: String
}

input IngredientUpdateInput {
  imgSrc: String
  imgSrc_unset: Boolean
  name: String
  name_unset: Boolean
  _id: ObjectId
  _id_unset: Boolean
}

input IngredientInsertInput {
  _id: ObjectId
  imgSrc: String
  name: String
}

type InsertManyPayload {
  insertedIds: [ObjectId]!
}